{"version":3,"sources":["components/grid-square.jsx","components/grid-row.jsx","components/grid.jsx","App.jsx","serviceWorker.js","index.js"],"names":["GridSquare","_check","_this","props","onCheckSquare","rowKey","squareKey","_this2","this","react_default","a","createElement","className","onClick","gameStatus","square","status","_handleContent","Component","GridRow","squares","row","map","i","grid_square","key","Grid","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","rows","board","grid_row","baseURL","App","state","currentGameId","currentBoard","numberOfMines","currentDifficulty","getURL","action","difficulty","id","col","concat","_updateGameState","mines","dif","setState","_startGame","axios","post","then","res","data","_checkSquare","_flagSquare","button","components_grid","resetButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e8347a0b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass GridSquare extends Component {\n\n  _check = () => {\n    this.props.onCheckSquare(this.props.rowKey, this.props.squareKey)\n  }\n\n  render() {\n\n    let click = () => {\n      // left right check here\n      return this.props.gameStatus === 'won' || this.props.gameStatus === 'lost' ? null : this._check()\n    }\n\n    let _handleContent = (square, status) => {\n      switch (square) {\n        case ' ': return ''; break\n        case '_': return ''; break\n        case 'F': return 'F'; break\n        case '*': return (status === 'won' || status === 'lost') ? '*' : ''; break\n        case '@': return (status === 'won' || status === 'lost') ? '@' : ''; break\n        default: return square; break\n      }\n    }\n\n    let _handleStyling = (square) => {\n\n    }\n\n    return (\n        <div className=\"square\" onClick={click}>\n          {_handleContent(this.props.square, this.props.gameStatus)}\n        </div>\n    )\n  }\n}\n\nexport default GridSquare;","import React, { Component } from 'react';\nimport GridSquare from './grid-square'\n\nclass GridRow extends Component {\n  render() {\n\n    let squares = this.props.row.map((square, i) => {\n      return (\n        <GridSquare key={i} rowKey={this.props.rowKey} squareKey={i} square={square} onCheckSquare={this.props.onCheckSquare} gameStatus={this.props.gameStatus}/>\n      )\n    })\n\n    return (\n        <div className=\"gridRow\">\n          {squares}\n        </div>\n    )\n  }\n}\n\nexport default GridRow;","import React, { Component } from 'react';\nimport GridRow from './grid-row'\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n\n      let rows = this.props.board.map((row, i) => {\n        return <GridRow key={i} rowKey={i} row={row} onCheckSquare={this.props.onCheckSquare} gameStatus={this.props.gameStatus}/>\n      })\n\n    return (\n        <div className=\"gridDiv\">\n          {rows}\n        </div>\n    )\n  }\n}\n\nexport default Grid;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Grid from './components/grid'\nimport axios from 'axios'\n\nconst baseURL = 'https://minesweeper-api.herokuapp.com/games/'\n\nclass App extends Component {\n  state = {\n    currentGameId: 0,\n    currentBoard: [],\n    numberOfMines: 0,\n    currentDifficulty: 0,\n    gameStatus: null\n  }\n\n  getURL = (action, difficulty, id, row, col) => {\n    switch (action) {\n      case 'newGame': return baseURL + `?difficulty=${id}`; break\n      case 'check': return baseURL + `${id}/check?row=${row}&col=${col}`; break\n      case 'flag': return baseURL + `${id}/flag?row=${row}&col=${col}`; break\n      case 'existingGame': return baseURL + `${id}`\n    }\n  }\n\n  _updateGameState = (id, board, mines, dif, status) => {\n    this.setState({\n      currentGameId: id,\n      currentBoard: board,\n      numberOfMines: mines,\n      currentDifficulty: dif,\n      gameStatus: status\n    })\n  }\n\n  _startGame = (difficulty) => {\n    axios.post(this.getURL('newGame', difficulty, null, null, null))\n      .then(res => {\n        let data = res.data\n        this._updateGameState(data.id, data.board, data.mines, data.difficulty, data.state)\n      })\n  }\n\n  _checkSquare = (row, col) => {\n    axios.post(this.getURL('check', null, this.state.currentGameId, row, col))\n      .then(res => {\n        let data = res.data\n        this._updateGameState(data.id, data.board, data.mines, data.difficulty, data.state)\n      })\n  }\n\n  _flagSquare = () => {\n\n  }\n\n  componentWillMount() {\n    // this._startGame(0)\n  }\n  \n  render() {\n\n    let grid = () => {\n      return (\n        <Grid board={this.state.currentBoard} onCheckSquare={this._checkSquare} gameStatus={this.state.gameStatus}/>\n      )\n    }\n\n    let button = () => {\n      return (\n        <button className=\"startButton\" onClick={this._startGame} >New Game</button>\n      )\n    }\n\n    let buttonOrGrid = () => {\n      let test = this.state.gameStatus == null ? button() : grid()\n      return test\n    }\n\n    let resetButton = () => {\n      if (this.state.gameStatus === 'won' || this.state.gameStatus === 'lost') {\n        return button()\n      }\n    }\n\n    return (\n      <main className=\"wrapper\">\n        <h1 className=\"header\">\n          Tip-toe through the anti-tank mines\n        </h1>\n        <div className=\"container\">\n          {buttonOrGrid()}\n          <div className=\"bracket\">\n            <div className=\"bracketOverlay\"></div>\n          </div>\n        </div>\n        {resetButton()}\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}